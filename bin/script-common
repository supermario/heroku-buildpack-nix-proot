#!/usr/bin/env bash

export NIX_VERSION=1.11.4
export NIX_VERSION_FULL=nix-$NIX_VERSION-x86_64-linux
export NIX_MNT=/tmp/nix-mnt
export NIX_ROOT_PATH=$NIX_MNT/$NIX_VERSION_FULL
export USER=$(whoami)

indent() {
  sed -u 's/^/       /'
}

trap 'err_handler $?' ERR

err_handler() {
  trap - ERR
  let i=0 exit_status=$1
  echo "Aborting on error $exit_status:"
  echo "--------------------"
  while caller $i; do ((i++)); done
  exit $exit_status
}

topic() {
  echo "-----> $*"
}

fetch() {
  curl -sSfL -o "$1" "$2"
}

download_and_install() {
  CACHE_DIR="$1"
  BUILD_DIR="$2"
  if [ -x "$CACHE_DIR/bin/$3" ]; then
    topic "$3 found in cache"
  else
    topic "Downloading $3"
    mkdir -p $CACHE_DIR/bin
    cd $CACHE_DIR/bin
    fetch $3 $4
    chmod u+x $3
  fi
  mkdir -p $BUILD_DIR/bin
  cp -f $CACHE_DIR/bin/$3 $BUILD_DIR/bin/$3
}

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

suppress_locale_warnings() {
  export LANG="C"
  export LC_ALL="C"
}

locate_nix_file() {
  if [ -e $BUILD_DIR/shell.nix ]; then
    echo "$BUILD_DIR/shell.nix"
  elif [ -e $BUILD_DIR/default.nix ]; then
    echo "$BUILD_DIR/default.nix"
  else
    echo "No shell.nix or default.nix found!" | indent
    false
  fi
}

prog_name_profile_closure() {
  if [ -z "${BUILD_DIR:-}" ]; then
    echo "BUILD_DIR not set! Can't locate .nix file." | indent
    false
  fi
  export BUILD_DIR
  export nix_file=$(locate_nix_file)
  echo "export NIX_FILE=$nix_file;
  export PROG_NAME=\$(nix-env -qa -f "$nix_file" | head -n 1);
  PROG_PROFILE=/nix/var/nix/profiles/\$PROG_NAME;
  CLOSURE_NAME=\$PROG_NAME.closure;
  CLOSURE=/tmp/\$CLOSURE_NAME"
}


check_for_s3() {
  if [ -z "${NIX_S3_KEY:-}" ] || [ -z "${NIX_S3_SECRET:-}" ] || [ -z "${NIX_S3_BUCKET:-}" ]; then
    topic "S3 info not set in configuration; closure cannot be loaded!"
    echo "Make sure the following variables are set:" | indent
    if [ -z "${NIX_S3_KEY:-}" ]; then echo "NIX_S3_KEY" | indent; fi
    if [ -z "${NIX_S3_SECRET:-}" ]; then echo "NIX_S3_SECRET" | indent; fi
    if [ -z "${NIX_S3_BUCKET:-}" ]; then echo "NIX_S3_BUCKET" | indent; fi
    false
  fi
}

try_download_closure() {
  check_for_s3
  export EC2_ACCESS_KEY=$NIX_S3_KEY
  export EC2_SECRET_KEY=$NIX_S3_SECRET

  if [ -e /closures/$CLOSURE_NAME ]; then # spoof closure transfer
    cp /closures/$CLOSURE_NAME $CLOSURE
  else
    set +e
    $BUILD_DIR/bin/aws get $NIX_S3_BUCKET/nix-closures/$CLOSURE_NAME $CLOSURE 2>&1| indent
    set -e
  fi
}

upload_closure() {
  check_for_s3
  export EC2_ACCESS_KEY=$NIX_S3_KEY
  export EC2_SECRET_KEY=$NIX_S3_SECRET

  if [ -d /closures ]; then # spoof closure transfer
    cp $CLOSURE /closures/$CLOSURE_NAME
  else
    $BUILD_DIR/bin/aws put $NIX_S3_BUCKET/nix-closures/$CLOSURE_NAME $CLOSURE 2>&1| indent
  fi
}

copy_custom_nix_config() {
  if [ -e $BUILD_DIR/.nixpkgs/config.nix ]; then
    mkdir -p $HOME/.nixpkgs
    cp $BUILD_DIR/.nixpkgs/config.nix $HOME/.nixpkgs/config.nix
  fi
}

install_nix() {
  copy_custom_nix_config

  if [ ! -e $HOME/.nix-defexpr/channels/nixpkgs ]; then
    cd /nix
    topic "Installing nix $NIX_VERSION"
    ./install 2>&1| indent
  else
    topic "Nix found"
  fi
}
